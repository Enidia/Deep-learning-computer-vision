# coding:utf-8

import numpy as np
from scipy import signal
import torch

def generate_data():
    # 本函数生成0-9，10个数字的图片矩阵
    image_data = []
    num_0 = torch.tensor(
        [[0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_0)
    num_1 = torch.tensor(
        [[0, 0, 0, 1, 0, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 1, 0, 0],
         [0, 0, 0, 1, 0, 0],
         [0, 0, 1, 1, 1, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_1)
    num_2 = torch.tensor(
        [[0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 0, 1, 0, 0],
         [0, 0, 1, 0, 0, 0],
         [0, 1, 1, 1, 1, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_2)
    num_3 = torch.tensor(
        [[0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_3)
    num_4 = torch.tensor(
        [
            [0, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 1, 0],
            [0, 0, 1, 0, 1, 0],
            [0, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0, 0, 0]])
    image_data.append(num_4)
    num_5 = torch.tensor(
        [
            [0, 1, 1, 1, 0, 0],
            [0, 1, 0, 0, 0, 0],
            [0, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 1, 0],
            [0, 1, 1, 1, 0, 0],
            [0, 0, 0, 0, 0, 0]])
    image_data.append(num_5)
    num_6 = torch.tensor(
        [[0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 0, 0],
         [0, 1, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_6)
    num_7 = torch.tensor(
        [
            [0, 1, 1, 1, 1, 0],
            [0, 0, 0, 0, 1, 0],
            [0, 0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0, 0],
            [0, 0, 0, 1, 0, 0],
            [0, 0, 0, 0, 0, 0]])
    image_data.append(num_7)
    num_8 = torch.tensor(
        [[0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 0, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_8)
    num_9 = torch.tensor(
        [[0, 0, 1, 1, 1, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 1, 1, 1, 0],
         [0, 1, 0, 0, 1, 0],
         [0, 0, 0, 0, 1, 0],
         [0, 0, 0, 0, 0, 0]])
    image_data.append(num_9)
    return image_data

#特征提取
def get_feature(x):

    def s_x(img):  #dx
        kernel = np.array([[-1, 0, 1]])
        imgx = signal.convolve2d(img, kernel, boundary='symm', mode='same')
        return imgx

    def s_y(img):  #dy
        kernel = np.array([[-1, 0, 1]]).T
        imgy = signal.convolve2d(img, kernel, boundary='symm', mode='same')
        return imgy

    def grad(img):  #模长
        imgx = s_x(img)
        imgy = s_y(img)
        s = np.sqrt(imgx ** 2 + imgy ** 2)
        theta = np.arctan2(imgx,imgy)
        theta = np.degrees(theta)#显示角度值
        #print('theta{}'.format(theta))
        theta[theta < 0] = np.pi + theta[theta < 0]
        return (s, theta)

    #print('G和角度:{}'.format(grad(x)))

    height, width = x.shape
    gradient_magnitude,gradient_angle = grad(x)
    #print('gradient_magnitude.shape{},gradient_angle.shape{}'.format(gradient_magnitude.shape,gradient_angle.shape))

    cell_size = 6 #cell 6*6
    bin_size = 8  #360°分8份
    angle_unit = 360 / bin_size#分成8份，每一份的度数
    gradient_magnitude = abs(gradient_magnitude) #取模长的绝对值
    cell_gradient_vector = np.zeros((int(height / cell_size), int(width / cell_size), bin_size))#整张图片对应多少个cell

    #print('cell_gradient_vector.shape{}'.format(cell_gradient_vector.shape))

    def cell_gradient(cell_magnitude, cell_angle): #每个cell的特征
        orientation_centers = [0] * bin_size  #建立一个全零的cell的特征向量
        for k in range(cell_magnitude.shape[0]): #cell是6*6的，遍历每一个像素点
            for l in range(cell_magnitude.shape[1]):
                gradient_strength = cell_magnitude[k][l] #对应的这个像素点的模长
                gradient_angle = cell_angle[k][l]  #对应的这个像素点的角度
                #print('gradient_angle{}'.format(gradient_angle))
                angle = int(gradient_angle / angle_unit)#角度值除以均分的每一部分的度数，整数部分是几就在第几个bin中
                orientation_centers[angle] = orientation_centers[angle]+ gradient_strength#将模长放入对应的bin中，每个bin的值不断累加更新
        #print('orientation_centers{}'.format(orientation_centers))
        return orientation_centers  #返回cell的特征向量

    for i in range(cell_gradient_vector.shape[0]): #遍历所有cell
        for j in range(cell_gradient_vector.shape[1]):
            cell_magnitude = gradient_magnitude[i * cell_size:(i + 1) * cell_size,  #取出图片上对应cell的模长
                             j * cell_size:(j + 1) * cell_size]
            cell_angle = gradient_angle[i * cell_size:(i + 1) * cell_size,  #取出图片上对应cell的角度
                         j * cell_size:(j + 1) * cell_size]
            #print(cell_angle.max())

            cell_gradient_vector[i][j] = cell_gradient(cell_magnitude, cell_angle) #将所有cell的特征向量串到一起
            #print(cell_gradient_vector[i][j])
            feature = cell_gradient_vector[i][j]  #得到整张图片的feature
            #print('feature:{}'.format(feature))
            return feature


def model(feature):
    y = -1
    image=[]
    min = 1000
    for i in range(10):
        image.append(np.array(get_feature(image_data[i])))#存储10张图的特征
        if min > abs(image[i]-get_feature(x)).sum():
            min = abs(image[i]-get_feature(x)).sum()#找出相减后的最小值
            y = i
    # 下面添加对feature进行决策的代码，判定出feature 属于[0,1,2,3,...9]哪个类别
    print(y)
    return y


if __name__ == "__main__":

    image_data = generate_data()
    # 打印出0的图像
    print("数字0对应的图片是:")
    print(image_data[0])
    print("-" * 20)
    print(image_data[0].dtype)

    # 打印出8的图像
    print("数字8对应的图片是:")
    print(image_data[8])
    print("-" * 20)

    # 对每张图片进行识别
    print("对每张图片进行识别")
    for i in range(0, 10):
        x = image_data[i]
        # 对当前图片提取特征
        feature = get_feature(x)
        # 对提取到得特征进行分类
        y = model(feature)
        # 打印出分类结果
        print("图像[%s]得分类结果是:[%s],它得特征是[%s]" % (i, y, feature))
